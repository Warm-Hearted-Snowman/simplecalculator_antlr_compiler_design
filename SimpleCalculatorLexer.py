# Generated from SimpleCalculator.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,162,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,0,1,0,3,0,58,8,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,66,8,1,1,2,
        1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,4,9,83,8,
        9,11,9,12,9,84,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,
        1,21,1,21,1,22,1,22,1,23,1,23,5,23,142,8,23,10,23,12,23,145,9,23,
        1,24,1,24,5,24,149,8,24,10,24,12,24,152,9,24,1,24,1,24,1,25,4,25,
        157,8,25,11,25,12,25,158,1,25,1,25,0,0,26,1,1,3,2,5,3,7,4,9,5,11,
        6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
        35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,1,0,6,2,0,
        60,60,62,62,1,0,48,57,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,
        122,3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,169,0,1,1,0,0,0,0,
        3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
        1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
        1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
        1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,57,
        1,0,0,0,3,65,1,0,0,0,5,67,1,0,0,0,7,69,1,0,0,0,9,71,1,0,0,0,11,73,
        1,0,0,0,13,75,1,0,0,0,15,77,1,0,0,0,17,79,1,0,0,0,19,82,1,0,0,0,
        21,86,1,0,0,0,23,88,1,0,0,0,25,90,1,0,0,0,27,96,1,0,0,0,29,99,1,
        0,0,0,31,104,1,0,0,0,33,109,1,0,0,0,35,115,1,0,0,0,37,118,1,0,0,
        0,39,122,1,0,0,0,41,127,1,0,0,0,43,133,1,0,0,0,45,137,1,0,0,0,47,
        139,1,0,0,0,49,146,1,0,0,0,51,156,1,0,0,0,53,54,5,61,0,0,54,58,5,
        61,0,0,55,56,5,33,0,0,56,58,5,61,0,0,57,53,1,0,0,0,57,55,1,0,0,0,
        58,2,1,0,0,0,59,66,7,0,0,0,60,61,5,60,0,0,61,66,5,61,0,0,62,63,5,
        62,0,0,63,66,5,61,0,0,64,66,5,33,0,0,65,59,1,0,0,0,65,60,1,0,0,0,
        65,62,1,0,0,0,65,64,1,0,0,0,66,4,1,0,0,0,67,68,5,40,0,0,68,6,1,0,
        0,0,69,70,5,41,0,0,70,8,1,0,0,0,71,72,5,43,0,0,72,10,1,0,0,0,73,
        74,5,45,0,0,74,12,1,0,0,0,75,76,5,42,0,0,76,14,1,0,0,0,77,78,5,47,
        0,0,78,16,1,0,0,0,79,80,5,94,0,0,80,18,1,0,0,0,81,83,7,1,0,0,82,
        81,1,0,0,0,83,84,1,0,0,0,84,82,1,0,0,0,84,85,1,0,0,0,85,20,1,0,0,
        0,86,87,5,61,0,0,87,22,1,0,0,0,88,89,5,58,0,0,89,24,1,0,0,0,90,91,
        5,112,0,0,91,92,5,114,0,0,92,93,5,105,0,0,93,94,5,110,0,0,94,95,
        5,116,0,0,95,26,1,0,0,0,96,97,5,105,0,0,97,98,5,102,0,0,98,28,1,
        0,0,0,99,100,5,116,0,0,100,101,5,104,0,0,101,102,5,101,0,0,102,103,
        5,110,0,0,103,30,1,0,0,0,104,105,5,101,0,0,105,106,5,108,0,0,106,
        107,5,115,0,0,107,108,5,101,0,0,108,32,1,0,0,0,109,110,5,119,0,0,
        110,111,5,104,0,0,111,112,5,105,0,0,112,113,5,108,0,0,113,114,5,
        101,0,0,114,34,1,0,0,0,115,116,5,100,0,0,116,117,5,111,0,0,117,36,
        1,0,0,0,118,119,5,102,0,0,119,120,5,111,0,0,120,121,5,114,0,0,121,
        38,1,0,0,0,122,123,5,108,0,0,123,124,5,111,0,0,124,125,5,111,0,0,
        125,126,5,112,0,0,126,40,1,0,0,0,127,128,5,98,0,0,128,129,5,101,
        0,0,129,130,5,103,0,0,130,131,5,105,0,0,131,132,5,110,0,0,132,42,
        1,0,0,0,133,134,5,101,0,0,134,135,5,110,0,0,135,136,5,100,0,0,136,
        44,1,0,0,0,137,138,5,44,0,0,138,46,1,0,0,0,139,143,7,2,0,0,140,142,
        7,3,0,0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,
        1,0,0,0,144,48,1,0,0,0,145,143,1,0,0,0,146,150,5,34,0,0,147,149,
        8,4,0,0,148,147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,
        1,0,0,0,151,153,1,0,0,0,152,150,1,0,0,0,153,154,5,34,0,0,154,50,
        1,0,0,0,155,157,7,5,0,0,156,155,1,0,0,0,157,158,1,0,0,0,158,156,
        1,0,0,0,158,159,1,0,0,0,159,160,1,0,0,0,160,161,6,25,0,0,161,52,
        1,0,0,0,7,0,57,65,84,143,150,158,1,6,0,0
    ]

class SimpleCalculatorLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BOOL = 1
    BINOP = 2
    OPENP = 3
    CLOSEP = 4
    PLUS = 5
    MINUS = 6
    MULT = 7
    DIV = 8
    POWER = 9
    Number = 10
    EQ = 11
    COLON = 12
    PRINT = 13
    IF = 14
    THEN = 15
    ELSE = 16
    WHILE = 17
    DO = 18
    FOR = 19
    LOOP = 20
    Begin = 21
    END = 22
    COMMA = 23
    ID = 24
    SL = 25
    WS = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'('", "')'", "'+'", "'-'", "'*'", "'/'", "'^'", "'='", "':'", 
            "'print'", "'if'", "'then'", "'else'", "'while'", "'do'", "'for'", 
            "'loop'", "'begin'", "'end'", "','" ]

    symbolicNames = [ "<INVALID>",
            "BOOL", "BINOP", "OPENP", "CLOSEP", "PLUS", "MINUS", "MULT", 
            "DIV", "POWER", "Number", "EQ", "COLON", "PRINT", "IF", "THEN", 
            "ELSE", "WHILE", "DO", "FOR", "LOOP", "Begin", "END", "COMMA", 
            "ID", "SL", "WS" ]

    ruleNames = [ "BOOL", "BINOP", "OPENP", "CLOSEP", "PLUS", "MINUS", "MULT", 
                  "DIV", "POWER", "Number", "EQ", "COLON", "PRINT", "IF", 
                  "THEN", "ELSE", "WHILE", "DO", "FOR", "LOOP", "Begin", 
                  "END", "COMMA", "ID", "SL", "WS" ]

    grammarFileName = "SimpleCalculator.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


